DevOps Bootcamp

DAY 1
Trainer: Malchiel Ed Urias
SDLC and DevOps

Content
- What’s SDLC
- Types of SDLC
- Traditional SDLC
- Problems with trad SDLC
- Intro to DevOps
- Benefit of devOps to SDLC
- DevOps Culture
- DevOps Lifecycle
- DevOps Practices
- DevOps Roadmap
- 

SDLC
- Software Dev Lifecycle structural framework that is used to design, build and test the qu
- 

Types
- Waterfall Model
    - ->requirement analysis -> system design-> implementation-> testing-> development-> maintenance
    - Problem with waterfall: rigid, slow, no proper communication between employees

DevOps: Includes practices, strategies and processes that involve the combination of development and operations activities and tasks to foster a more effective and most efficient	application development and delivery process

Benefit Of DevOps: 
- Speed: Innovate quickly to meet the requirements of the market trends
- Collaboration and communication between employees and the devOps engineer
- Rapid Delivery: ability to deliver features, fixes and/or updates to cudtomer
- Scale
- Reliability
- Improved MTTR:

NB: DevOps is a mindset

Grafana New 
 SDLC has 8 Phases
- Operations
    - Deploy:
    - Operate
    - Observe
    - Continious feedback

DevOps Practices
- Continous Integration:Ability to seemlessly integrate new features into your previous project without breaking it
- Continous Delivery: deployment  to the web
- Infrastructure as Code:Using code to implement integration having a source of truth for your implementation
- Microservice Architecture: Breaking down a product into various loosely coupled services
        - Automation: Automating processes through writing processes that automatically execute actions
- Monitoring and Observability: Ability to pinpoint error either in the present to in the future like zero-day
- DevOps Roadmaps 

DAY 2
O.S
Functionality Of O.S
Process Management: program or part of a program that run on a computer that gets loaded to the main memory, to perform task that will need certain computer resources

OS concerning file management

DAY 3
Process
- PCB is a data structure that is maintained for each process in an OS
- Importance of main memory
    - Keep track of used memory space and processes
    - Minimize fragmentation issues
    - Proper utilization of main memory
    - Mention data integrity while executing a process
- Logical Address: Address generated by the CPU during program excecution
- Physical Address: actual address in the main memory where data is stored, it’s the location 
- MMU(Memory management Unit): a physical hardware of a computer that manages its virtual memory and caching function.
- Static Vs Dynamic Loading:Static is Loading the entire program into a fixed address while dynamic loading the entire program and all data of a process must be in physical memory for the process to execute
- In dynamic loading a routine is not loaded until it is called
- Linker is a program that takes one or more object files generated by a compiler and combine them into a single executable file
- Static and Dynamic Linking: 
- SWAPPING: process of swapping a process temporarily into a secondary memory from the main memory which is fast compared to secondary memory (swapping is based on priority)
- Memory allocation:Contiguous Memory Allocation and non-contiguous memory allocation
- Process = executed program
- Fragmentation: when a process is loaded and removed after execution from memory it create a small free hole Types: Internal Fragmentation External Fragmentation
- Paging is the core process under memory managemement

Linux: Is a multi-user OS and has the the that restrict users access based on priviledges
- Etc houses the configuration files in the linux os
- When typing “ls -lr” in a directory you’ll see “rw-r—r—@“ behind this files
Chmod:r=read, w=write
Permissions: u=user, g=group o=others, a=all
- Chmod g+wx xyz.txt
- One can use octal notation to replace the r,w,x like the one listed on the table


DAY 4
LINUX Command - Processes
- Running state: when a state is ready to run
- Sleeping state: when a process is waiting for a resource to be available etc
Commands
- Top: to track running processes on your machine 
- Ps: short for Process Status it display currently running processes
- Kill: stop a running process
VAGRANT
- Used to describe the type of machine required for a project
- Vagrant boxes are the package format for vagrant env, you specify in the vagrant file and it’s used to

DAY 5
sudo service apache2 start #start-apache
sudo service apache2 status #check-start
Comment out
config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1" on your vagrant file

- Write a bash script that can run the whole vagrant setup and installations 
- A bash that can install nginx and set it up and use  the bash script as the provisioning overview
- https://developer.hashicorp.com/vagrant/docs/provisioning

PROMOTIONAL TASK
- Create a group: sudo addgroup <groupnam>
- Create a user: adduser <username> -> then you will fill in the command
- Adding an existing user into a group: sudo adduser <username> <groupname>
- Remove existing user from a group without deleting the user or group: deluser <username> <groupname>
- List out groups: compgen -g # get users
- List out users: compgen -u # get users
- List out users that belongs to a group: getent group <groupname>
- Delete group:  delgroup <groupname>
- Delete user: deluser <username>

- How do I change the user/owner associated with file1? # chown user02 file1
- How do I change the group associated with file1?  # chown :groupA file1
- How do I change the owner and group at the same time for file2? # chown user02:groupA file2
- Print user info: id <user>

Relationship is between user > team > company
Celery: queue executing task 

DAY 5 (Tuesday 4/06/2024)
Python For DevOps
- Bash scripting = linux while powershell = windows
- Install python3 
- Set up a virtual env python3 -m venv
- Activate the virtual environment source venv/bin/activate
- Create a py file 
- Import modules (os)
- cwd = Os.getcwd(): gets current working directory
- print(cwd)

PROMOTIONAL TASK 3
- On a single vagrant file Provision 2 VMS accordingly
    - Web-server
    - database
- configure the web server using a shell provisioner(write the bash script in a different file and reference it using the path option)
- Customize the resources of your vm: memory=1024
- Set up nginx server on your machine
- Configure the db server VM using shell provisioner (write the bash script in a different file and reference it using the path option)
- Customize the resources of your VM memory=2048
- Setup mysql on your machine
- Both machine should be able to communicate with each other on the network

DAY 7 (11/06/2024)GIT
- Version control systems: AKA source code management system software that track and manage changes to files and other digital assets
- Problems VCS solves: 
    - change conflicts, 
    - data inconsistencies,
    - reduced system and code maintainability, 
    - breackdown velocity and speed of development
- Types: local VCS(git), centralised VCS(apache SVN,), distributed VCS(github)

DAY 8 (14/06/2024) BRANCHING STRATEGIES
Gitlab flow
Best practices
Is CI/CD only limited to one flow
- Terminal: ssh-keygen (generate an ssh key in your local machine)
- Your ssh private and public key will be saved in a .ssh folder in the directory you generated your ssh key
- Cat path-to-file/.ssh/ssh-filename-pub: prints out the public keys
- Isometric encryption RESEARCH IT
- Initialise git :git init
- Git remote add

DAY 9 CI/CD(18/6/2)
- Meaning continuous Integration and Continuous Development 
- Why CI/CD:
    - Automation: Reduces manual intervention
    - Efficiency:Speeds up the development Process
    - Quality: Ensure code quality through automated testing
    - Consistency:
    - Feedback
- CI: frequently integrating code changes into a shared repo where automated build and tests are run
- CD: Extension of CI
- Github action: CI/CD tools provided by GitHub that allows you to automate, customise and execute your software development
- Github actions automate processes by setting action as task in a server
- Github action provides servers for you to run your jobs and other workflows
- Actions: reusable unit of code that can be shared across workflows enabling modularity and reuse
- Jobs: A set of steps to be executed as part of the workflow. Each job runs in an isolated environment called a runner
- Runners:are servers that execute your workflows
- .github/workflow/name-of-DIR is where you GitHub is going to be looking for 
- GitHub action uses YAML
- YAML structure: 
    - name: name of the action
    - on: the action is should be monitoring(this is called a trigger workflow)[push,pull-request]
        - Branch: where the action will be watching(optional)
    - Jobs:
        - Runs-on: the OS runner
        - Steps: steps of action you will follow
            - name:
            - uses: action/checkout@v4
            - Name:display Greeting
            - run: | echo “welcome to your GitHub workflow”
        - check-directory”
        - Runs-on:ubuntu-20.04
        - steps:
            - name: List Directories
            - run: ls -a
- Best practices
    - Commit frequent incremental changes:small changes makes it easier to identify issues and ensure smoother integration
    - Write automated Tests: Ensure code quite and catch bugs early
    - Use Secrets: Secure sensitive info like API key and credentials using GitHub secrets
    - Monitor and Optimise:continously monitor CI/CD pipeline for 
    - Fail Fast
- Set up server like nginx with github actions can we access it 
- https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/adding-self-hosted-runners
- https://github.com/actions/checkout
- https://github.com/MalchielUrias/KodeCamp-04repo/tree/main

TUESDAY 25/06/2024 PRACTICAL NETWORKING AND SETTING UP THE AWS ACCT
Private IP address ranges
- 10.0.0.0/8 ip addresses:10.0.0.0 - 20.255.255.255
- 172.16.0.0/12 ip addresses:172.16.0.0 - 172.31.255.255
- 192.168.0.0/16 ip addresses:192.168.0.0 - 192.168.255.255
Create VPC on AWS
VPC - virtual private cloud
CIDR range formula = 2^(32 - n)
192.1868.0.0/16 = 2^(32 - 16) = 65,536 host / ip addresses
192.168.0.0/20 = 2^(32 - 20) = 2^12 = 4096 host
On AWS create two subnets
Create a route table: that all internet traffic should be routed to a given or specified service

Note: route table intitially are created when a subnet is created but yet a route table can dynamically be created with subnet association

For a subnet to access the internet needs an internet gateway you can dynamically create the gateway and attach it to your newly assigned vpc

Create servers that you will connect to your subnets

AWS COMPUTE SERVICE CLOUD 02/07/2024
- C-series of instances: Compute Optimised Instances: gives higher cut and process
- Memory Optimised Instances:Instances designed for memory intensive applications and deliver performance for large dataset
- Use cases: In-memory dbs, big data processes, real-time analysis
- Steps 
    - Instances
    - Instance types
    - Reserved instances
    - Spot instances:can bid instances but it’s not reliable cos a higher bidder can collect your instances
    - AWS Lambda: you pay for when your code is executed but not when your code is dormant
    - AWS Elastic Container Services: Highly scaleable cloud service mostly suitable for team that doesn’t need to do containerised services and need AWS to run most stuffs
    - AWS EKS: AWS Manages  the kubernates container while you manage the nodes
    - Amazon LightSail: one can set internet architecture to run basic applications like nodejs, Django and all and it’s quite affordable depending on your workload
AWS IDENTITY AND ACCESS MANAGEMENT(IAM)
- Principle of least privilege: users should always be given just enough access to do exactly what they need not more
- Storage services in AWS: s3, EBS(Elastic Block storage)
- To access your IAM On your AWS console your can search IAM on the search Bar
- Then the other will follow suit
- Once you login with a new AWS acct, create a new account in AWS account as admin, don’t work With your root user account
- You can create an admin user account you can work with that’s not a root user

9/07/2024 INFRASTRUCTURE AS CODE
1. CONCEPT
    1. IaC: Allows you to use declarative scripting languages to create resources, more like creating resources with code
    2. It offers benefits which allows ease of infrastructure tools reviews like
    3. IaC tools: salt, puppet, terraform, plum etc
    4. Terragunt
    5. The var keyword is used to create variable “var.keyword”
2. CREATING RESOURCES
    1. Community for terraform AWS modules
    2. Terraform AWS modules GitHub
3. files: name.tf, variable.tf, output.tf
https://registry.terraform.io/providers/hashicorp/aws/latest/docs
Don’t mess with AWS state once it’s been created
Connect to your was cloud in your cli
Then configure your aws configure to configure the terraform 

Connect user to AWS console
Install aws cli 
Create user
Download the necessary key during creation 
AWS configure command to set which account to use
Set the profile in your terraform file so it will look for the profile 

